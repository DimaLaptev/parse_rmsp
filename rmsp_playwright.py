#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–ú–°–ü –ø–∞—Ä—Å–µ—Ä —Å Playwright (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ Selenium)
RMSP parser with Playwright (modern Selenium alternative)
"""

import sys
import re
import asyncio
from playwright.async_api import async_playwright
from bs4 import BeautifulSoup


def validate_inn(inn):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù"""
    if not inn:
        return False
    inn = inn.replace(' ', '').replace('-', '')
    if not re.match(r'^\d{10}$|^\d{12}$', inn):
        return False
    return inn


async def search_rmsp_playwright(inn):
    """
    –ü–æ–∏—Å–∫ –≤ –†–ú–°–ü –∏—Å–ø–æ–ª—å–∑—É—è Playwright
    """
    
    validated_inn = validate_inn(inn)
    if not validated_inn:
        return {
            'found': False,
            'category': '-',
            'inclusion_date': '-',
            'message': f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù: {inn}'
        }
    
    print(f"–ü–æ–∏—Å–∫ –¥–ª—è –ò–ù–ù: {validated_inn}")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º Playwright...")
    
    async with async_playwright() as p:
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
            browser = await p.chromium.launch(headless=True)
            page = await browser.new_page()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
            await page.set_extra_http_headers({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            })
            
            print("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –†–ú–°–ü...")
            await page.goto('https://rmsp.nalog.ru/search.html#', wait_until='networkidle')
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
            print("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã...")
            await page.wait_for_timeout(3000)  # 3 —Å–µ–∫—É–Ω–¥—ã
            
            # –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –ò–ù–ù
            search_selectors = [
                'input[placeholder*="–ò–ù–ù"]',
                'input[name*="search"]',
                'input[id*="search"]',
                'input[type="text"]'
            ]
            
            search_input = None
            for selector in search_selectors:
                try:
                    search_input = await page.wait_for_selector(selector, timeout=5000)
                    if search_input:
                        print(f"–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–æ: {selector}")
                        break
                except:
                    continue
            
            if not search_input:
                await browser.close()
                return {
                    'found': False,
                    'category': '-',
                    'inclusion_date': '-',
                    'message': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ò–ù–ù'
                }
            
            # –í–≤–æ–¥–∏–º –ò–ù–ù
            await search_input.click()
            await search_input.fill('')  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            await search_input.fill(validated_inn)
            print(f"–ò–ù–ù {validated_inn} –≤–≤–µ–¥–µ–Ω")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
            search_buttons = [
                'button:has-text("–ù–∞–π—Ç–∏")',
                'button:has-text("–ù–ê–ô–¢–ò")',
                'button:has-text("–ü–æ–∏—Å–∫")',
                'input[type="submit"]',
                'button[type="submit"]'
            ]
            
            search_clicked = False
            for button_selector in search_buttons:
                try:
                    button = await page.wait_for_selector(button_selector, timeout=3000)
                    if button:
                        await button.click()
                        search_clicked = True
                        print(f"–ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–∞—Ç–∞: {button_selector}")
                        break
                except:
                    continue
            
            if not search_clicked:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter
                await search_input.press('Enter')
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ä–º–∞ —á–µ—Ä–µ–∑ Enter")
            
            # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...")
            await page.wait_for_timeout(5000)  # 5 —Å–µ–∫—É–Ω–¥
            
            # –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await page.wait_for_selector('table, div:has-text("–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")', timeout=10000)
            except:
                pass
            
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            html_content = await page.content()
            
            await browser.close()
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            return parse_search_results(html_content, validated_inn)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Playwright: {e}")
            try:
                await browser.close()
            except:
                pass
            
            return {
                'found': False,
                'category': '-',
                'inclusion_date': '-',
                'message': f'–û—à–∏–±–∫–∞ Playwright: {str(e)}'
            }


def parse_search_results(html_content, inn):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    soup = BeautifulSoup(html_content, 'html.parser')
    
    result = {
        'found': False,
        'category': '-',
        'inclusion_date': '-',
        'message': ''
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    user_message = soup.find(string=re.compile(r'–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
    if user_message:
        parent = user_message.parent
        if parent and '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–µ–¥–µ–Ω–∏–π' in parent.get_text().lower():
            result['message'] = '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ'
            return result
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    table = soup.find('table')
    if table:
        rows = table.find_all('tr')
        if len(rows) > 1:
            for row in rows[1:]:
                cells = row.find_all(['td', 'th'])
                if len(cells) >= 4:
                    result['found'] = True
                    result['category'] = cells[1].get_text(strip=True) if len(cells) > 1 else '-'
                    result['inclusion_date'] = cells[3].get_text(strip=True) if len(cells) > 3 else '-'
                    break
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
    if not result['found']:
        page_text = soup.get_text().lower()
        
        if '–º–∏–∫—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ' in page_text:
            result['found'] = True
            result['category'] = '–ú–∏–∫—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ'
        elif '–º–∞–ª–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ' in page_text:
            result['found'] = True
            result['category'] = '–ú–∞–ª–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ'
        elif '—Å—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ' in page_text:
            result['found'] = True
            result['category'] = '–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ'
        
        # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã
        if result['found']:
            date_pattern = r'\d{2}\.\d{2}\.\d{4}'
            dates = re.findall(date_pattern, soup.get_text())
            if dates:
                result['inclusion_date'] = dates[0]
    
    return result


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("–†–ú–°–ü –ü–∞—Ä—Å–µ—Ä —Å Playwright")
    print("=" * 40)
    
    if len(sys.argv) < 2:
        inn = input("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù: ")
    else:
        inn = sys.argv[1]
    
    if not inn:
        print("–ò–ù–ù –Ω–µ –≤–≤–µ–¥–µ–Ω")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        result = asyncio.run(search_rmsp_playwright(inn))
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "=" * 40)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ò–°–ö–ê")
        print("=" * 40)
        
        if result['found']:
            print("1. –°–¢–ê–¢–£–°: ‚úÖ –ù–ê–ô–î–ï–ù–ê")
            print(f"2. –ö–ê–¢–ï–ì–û–†–ò–Ø: {result['category']}")
            print(f"3. –î–ê–¢–ê –í–ö–õ–Æ–ß–ï–ù–ò–Ø: {result['inclusion_date']}")
        else:
            print("1. –°–¢–ê–¢–£–°: ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê")
            print("2. –ö–ê–¢–ï–ì–û–†–ò–Ø: -")
            print("3. –î–ê–¢–ê –í–ö–õ–Æ–ß–ï–ù–ò–Ø: -")
            
            if result['message']:
                print(f"\n–î–µ—Ç–∞–ª–∏: {result['message']}")
        
        print("=" * 40)
        
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install playwright")
        print("–ò –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: playwright install")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä:")
        print(f"python rmsp_parser.py {inn}")


if __name__ == "__main__":
    main()
